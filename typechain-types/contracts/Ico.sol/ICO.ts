/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICOInterface extends utils.Interface {
  functions: {
    "advancePhase()": FunctionFragment;
    "allowList(address)": FunctionFragment;
    "contributeEth()": FunctionFragment;
    "contributions(address)": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "pausedContribute()": FunctionFragment;
    "pausedRedeem()": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "spaceCoin()": FunctionFragment;
    "spaceCoinAddress()": FunctionFragment;
    "spcDeposit(address)": FunctionFragment;
    "togglePauseContribute()": FunctionFragment;
    "togglePauseRedeem()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "advancePhase"
      | "allowList"
      | "contributeEth"
      | "contributions"
      | "currentPhase"
      | "pausedContribute"
      | "pausedRedeem"
      | "redeem"
      | "spaceCoin"
      | "spaceCoinAddress"
      | "spcDeposit"
      | "togglePauseContribute"
      | "togglePauseRedeem"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "advancePhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pausedContribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pausedRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "spaceCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spaceCoinAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spcDeposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePauseContribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "togglePauseRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "advancePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributeEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausedContribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausedRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spaceCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spaceCoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spcDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "togglePauseContribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePauseRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Contributed(address,uint256,uint256)": EventFragment;
    "PhaseAdvanced(uint8)": EventFragment;
    "Redeemed(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Contributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseAdvanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ContributedEventObject {
  from: string;
  _msgvalue: BigNumber;
  amount: BigNumber;
}
export type ContributedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ContributedEventObject
>;

export type ContributedEventFilter = TypedEventFilter<ContributedEvent>;

export interface PhaseAdvancedEventObject {
  phase: number;
}
export type PhaseAdvancedEvent = TypedEvent<[number], PhaseAdvancedEventObject>;

export type PhaseAdvancedEventFilter = TypedEventFilter<PhaseAdvancedEvent>;

export interface RedeemedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber],
  RedeemedEventObject
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface WithdrawnEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface ICO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    advancePhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contributeEth(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPhase(overrides?: CallOverrides): Promise<[number]>;

    pausedContribute(overrides?: CallOverrides): Promise<[boolean]>;

    pausedRedeem(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spaceCoin(overrides?: CallOverrides): Promise<[string]>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<[string]>;

    spcDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    togglePauseContribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    togglePauseRedeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  advancePhase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowList(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contributeEth(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  pausedContribute(overrides?: CallOverrides): Promise<boolean>;

  pausedRedeem(overrides?: CallOverrides): Promise<boolean>;

  redeem(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spaceCoin(overrides?: CallOverrides): Promise<string>;

  spaceCoinAddress(overrides?: CallOverrides): Promise<string>;

  spcDeposit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  togglePauseContribute(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  togglePauseRedeem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    advancePhase(overrides?: CallOverrides): Promise<void>;

    allowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contributeEth(overrides?: CallOverrides): Promise<void>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    pausedContribute(overrides?: CallOverrides): Promise<boolean>;

    pausedRedeem(overrides?: CallOverrides): Promise<boolean>;

    redeem(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spaceCoin(overrides?: CallOverrides): Promise<string>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<string>;

    spcDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    togglePauseContribute(overrides?: CallOverrides): Promise<void>;

    togglePauseRedeem(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Contributed(address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      _msgvalue?: null,
      amount?: null
    ): ContributedEventFilter;
    Contributed(
      from?: PromiseOrValue<string> | null,
      _msgvalue?: null,
      amount?: null
    ): ContributedEventFilter;

    "PhaseAdvanced(uint8)"(phase?: null): PhaseAdvancedEventFilter;
    PhaseAdvanced(phase?: null): PhaseAdvancedEventFilter;

    "Redeemed(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemedEventFilter;
    Redeemed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemedEventFilter;

    "Withdrawn(address,uint256)"(
      to?: null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(to?: null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    advancePhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributeEth(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    pausedContribute(overrides?: CallOverrides): Promise<BigNumber>;

    pausedRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spaceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<BigNumber>;

    spcDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    togglePauseContribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    togglePauseRedeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    advancePhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributeEth(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedContribute(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedRedeem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spaceCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spcDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    togglePauseContribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    togglePauseRedeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
